context_parser: pypyr.parser.keyvaluepairs
steps:
  - name: pypyr.steps.default
    in:
      defaults:
        owner: pypyr
        repo: pypyr
        last: 1
        out: ./content/updates/releases
        template: ./ops/templates/release.md
  - name: pypyr.steps.contextsetf
    in:
      contextSetf:
        payload: !jsonify
          query: !sic
            'query($owner: String!, $repo: String!, $last: Int!) {
              repository (owner:$owner, name:$repo){ 
                releases (orderBy:{direction: ASC, field:CREATED_AT},last:$last) {
                  edges {
                    node {
                          id
                          name
                          createdAt
                          url
                          description
                          descriptionHTML
                          shortDescriptionHTML
                          publishedAt
                          author {
                            id
                            name
                            login
                            url
                          }
                        tag {
                          id
                        }
                        tagName
                    }
                  }
                }
              }
            }'
          variables:
            owner: '{owner}'
            repo: '{repo}'
            last: '{last}'
  - name: pypyr.steps.env
    description: --> getting bearer token from $ENV
    in:
      env:
        get:
          bearerToken: GITHUB_BEARER_TOKEN
  - name: pypyr.steps.cmd
    description: --> getting release data from github
    in:
      cmd:
        run: |-
            curl -H "Authorization: bearer {bearerToken}" -H 'Content-Type: application/json' -X POST -d '{payload}' https://api.github.com/graphql
        save: True
  - name: pypyr.steps.jsonparse
    description: --> parsing github response data
    in:
      jsonParse:
        json: '{cmdOut[stdout]:ff}'
        key: releases
  - name: pypyr.steps.filereplace
    description: --> generating output files at {out}
    foreach: '{releases[data][repository][releases][edges]:ff}'
    run: True
    in:
      fileReplace:
        in: '{template}'
        out: '{out}/{i[node][tagName]}.md'
        replacePairs:
          <<repo>>: '{repo}'
          <<tag>>: '{i[node][tagName]}'
          <<date>>: '{i[node][publishedAt]}'
          <<short-description>>: '{i[node][name]:ff}'
          <<h2>>: '{i[node][name]}'
          <<description>>: '{i[node][description]:ff}'
          <<release-url>>: '{i[node][url]}'
          <<author-name>>: '{i[node][author][login]}'
          <<author-url>>: '{i[node][author][url]}'

